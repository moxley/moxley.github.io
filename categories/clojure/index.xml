<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on Moxley Stratton</title>
    <link>http://www.moxleystratton.com/categories/clojure/</link>
    <description>Recent content in Clojure on Moxley Stratton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Nov 2014 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.moxleystratton.com/categories/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sometimes Clojure is More Concise than Ruby</title>
      <link>http://www.moxleystratton.com/sometimes-clojure-is-more-concise-than-ruby/</link>
      <pubDate>Mon, 24 Nov 2014 19:00:00 +0000</pubDate>
      
      <guid>http://www.moxleystratton.com/sometimes-clojure-is-more-concise-than-ruby/</guid>
      <description>I find that 90% of the time, Clojure is more verbose than Ruby. Here&amp;rsquo;s one simple example where Clojure wins a conciseness battle:
;; Subtract two vectors in Clojure (def a [10 9 8]) (def b [1 2 3]) (map - a b) ;; (9 7 5)  # Subtract two vectors in Ruby a = [10, 9, 8] b = [1, 2, 3] a.zip(b).map { |(a, b)| a - b } # [9, 7, 5]  What is it about Ruby that makes it less concise in this example?</description>
    </item>
    
    <item>
      <title>Clojure Tutorial for the Non-Lisp Programmer</title>
      <link>http://www.moxleystratton.com/clojure-tutorial-for-the-non-lisp-programmer/</link>
      <pubDate>Thu, 01 May 2008 12:00:00 +0000</pubDate>
      
      <guid>http://www.moxleystratton.com/clojure-tutorial-for-the-non-lisp-programmer/</guid>
      <description>I intend to keep this tutorial as accurate and up-to-date as possible. If you have any suggestions for changes, please leave a comment at the bottom of this page.
Clojure is a functional lisp dialect that uses the Java Virtual Runtime as its platform. The language home page is at http://clojure.org/.
Table of Contents  A Quick Comparison Installing Clojure Atoms Vectors Lists Maps and Sets Defining Variables and Functions Special Forms Looping and Iterating Sequences Java Integration Using Libraries Additional Resources</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Moxley Stratton]]></title>
  <link href="http://www.moxleystratton.com/atom.xml" rel="self"/>
  <link href="http://www.moxleystratton.com/"/>
  <updated>2017-12-28T10:43:21-08:00</updated>
  <id>http://www.moxleystratton.com/</id>
  <author>
    <name><![CDATA[Moxley Stratton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir Abstract Syntax]]></title>
    <link href="http://www.moxleystratton.com/blog/2017/12/28/elixir-abstract-syntax/"/>
    <updated>2017-12-28T09:02:41-08:00</updated>
    <id>http://www.moxleystratton.com/blog/2017/12/28/elixir-abstract-syntax</id>
    <content type="html"><![CDATA[<p>As developers know, program source code is represented as lines of text.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree
(AST)</a> is the representation
of the source code as a hierarchical data graph, specifically a tree structure.
With an AST, much of the difficult work parsing the original source code has
been performed, and the syntax can be introspected programatically.</p>

<p>Similar to an AST, the <a href="https://en.wikipedia.org/wiki/Abstract_semantic_graph">Abstract Semantic Graph (ASG)</a> is a graph of the
semantic representation of the source code. The ASG goes one step further than
the AST by representing semantic information.</p>

<!-- more -->


<p>When Erlang or Elixir source files are compiled, each module is converted to an
Abstract Semantic Graph and saved to a file. This file is called a BEAM file,
and it has a <code>.beam</code> extension.</p>

<p>Elixir provides a way to extract either the AST or ASG from source code. This
information is used by tools such as Formatter and Dialyzer for the benefit of
developers.</p>

<p>We&rsquo;ll walk through two techniques for extracting information from program code.</p>

<h3>The Elixir AST</h3>

<p>The function <code>Code.string_to_quoted!/1</code> converts Elixir source code into Elixir Abstract
Syntax Tree (AST).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">string_to_quoted!</span><span class="p">(</span><span class="s2">&quot;2 + 3&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">line</span><span class="p">:</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>string_to_quoted!/1</code> (and its sibling <code>string_to_quoted/1</code>) know that the
above bit of source code is an operation on two operands. It represents the
plus sign as an atom (<code>:+</code>), and it represents the two operands as a list
(<code>[2, 3]</code>).</p>

<p>The Elixir AST typically contains three-element tuples like the one above. The
first element is an operation or data type. The second element is metadata about
the operation (e.g., source code line number), and the third element is the
arguments of the operation, or in the case of a data type, the data.</p>

<p>Let&rsquo;s try an example on a function call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">string_to_quoted!</span><span class="p">(</span><span class="s2">&quot;f()&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:f</span><span class="p">,</span> <span class="p">[</span><span class="ss">line</span><span class="p">:</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above represents a function call with an operand <code>:f</code>. In actuality, the AST
is not sure it&rsquo;s actually a function call. It just knows that the expression
is &ldquo;call-like&rdquo;, that it takes zero arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">string_to_quoted!</span><span class="p">(</span><span class="s2">&quot;v&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:v</span><span class="p">,</span> <span class="p">[</span><span class="ss">line</span><span class="p">:</span> <span class="mi">1</span><span class="p">],</span> <span class="no">nil</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the AST gives <code>nil</code> to the arguments list, meaning arguments don&rsquo;t apply.
The AST representation does&rsquo;t actually know whether it&rsquo;s a call or a variable.
In Elixir parentheses are optional for a function call, so it could be either.</p>

<p>We&rsquo;ll do one more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">string_to_quoted!</span><span class="p">(</span><span class="s2">&quot;%{a: \&quot;a\&quot;}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:%{}</span><span class="p">,</span> <span class="p">[</span><span class="ss">line</span><span class="p">:</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above shows what the AST looks like for a map literal.</p>

<h2>The BEAM File</h2>

<p>When Elixir (or Erlang) compiles a module, it creates a <code>.beam</code> file that
stores the compiled module. If code is compiled using <code>mix</code>, the <code>.beam</code> files
can be found in <code>_build/**/lib/**/ebin/*.beam</code>.</p>

<p>The <code>.beam</code> file can be created more directly, using <code>elixirc</code>.
This puts the <code>.beam</code> file in the current directory. We will
use <code>elixirc</code> for the purposes of this article.</p>

<p>We&rsquo;ll start with a sample module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">MyModule</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">addition</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">an_atom</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">:hello</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">a_call</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">value</span> <span class="p">=</span> <span class="n">addition</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the above file to <code>my_module.ex</code>, then run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="err">$</span> <span class="n">elixirc</span> <span class="n">my_module</span><span class="p">.</span><span class="n">ex</span>
</span><span class='line'><span class="err">$</span> <span class="n">file</span> <span class="nc">Elixir.MyModule</span><span class="p">.</span><span class="n">beam</span>
</span><span class='line'><span class="nc">Elixir.MyModule</span><span class="p">.</span><span class="ss">beam</span><span class="p">:</span> <span class="nc">Erlang</span> <span class="nc">BEAM</span> <span class="n">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>Erlang provides the <code>beam_lib</code> library and its <code>chunks/2</code> function for reading
the <code>.beam</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:beam_lib</span><span class="p">.</span><span class="n">chunks</span><span class="p">(</span><span class="s1">&#39;Elixir.MyModule.beam&#39;</span><span class="p">,</span> <span class="p">[</span><span class="ss">:abstract_code</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">{</span><span class="nc">MyModule</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>         <span class="ss">abstract_code</span><span class="p">:</span> <span class="p">{</span><span class="ss">:raw_abstract_v1</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                           <span class="p">{</span><span class="ss">:attribute</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:file</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;my_module.ex&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">}},</span>
</span><span class='line'>                           <span class="p">{</span><span class="ss">:attribute</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:module</span><span class="p">,</span> <span class="nc">MyModule</span><span class="p">},</span>
</span><span class='line'>                           <span class="p">{</span><span class="ss">:attribute</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:compile</span><span class="p">,</span> <span class="ss">:no_auto_import</span><span class="p">},</span>
</span><span class='line'>                           <span class="p">{</span><span class="ss">:attribute</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:export</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                              <span class="ss">__info__</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                              <span class="ss">a_call</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                              <span class="ss">addition</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                              <span class="ss">an_atom</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>                            <span class="p">]},</span>
</span><span class='line'>                           <span class="p">...</span>
</span><span class='line'>                           <span class="p">]}]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument to <code>:beam_lib.chunks/2</code> is the <code>.beam</code> file path. Note the
single quotes; it&rsquo;s a <em>charlist</em>, not a string.</p>

<p>The second argument is a list of &ldquo;chunk types&rdquo; to extract from the <code>.beam</code> file.
The full list of available chunk types can be found in the <a href="https://github.com/erlang/otp/blob/master/lib/stdlib/src/beam_lib.erl#L68-L73">Erlang Source Code</a>.</p>

<p>The bulk of the return data is a list of tuples. Some of the tuples contain
the atom <code>:attributes</code> as the first element, and the others have <code>:function</code> as
the first element.</p>

<p>The tuples having <code>:function</code> represent the functions of the module. The third
element in the tuple is the function name.</p>

<p>You&rsquo;ll notice a large function called
<code>:__info__</code> that is automatically added to all Elixir modules.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span><span class="ss">:function</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">:__info__</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[...]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last three
functions are the ones defined in the module&rsquo;s source code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:function</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">:a_call</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[...]},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:function</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:addition</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[...]},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:function</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="ss">:an_atom</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[...]}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Digging into the <code>:addition</code> function representation, we can see the semantic
representation of the simple addition operation, <code>2 + 3</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">:op</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:+</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:integer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:integer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the goal is to get the list of functions defined by the module, a small filter and map is all it takes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">{</span><span class="n">module</span><span class="p">,</span> <span class="p">[</span><span class="ss">abstract_code</span><span class="p">:</span> <span class="p">{</span><span class="ss">:raw_abstract_v1</span><span class="p">,</span> <span class="n">attributes</span><span class="p">}]}}</span> <span class="p">=</span>
</span><span class='line'>  <span class="ss">:beam_lib</span><span class="p">.</span><span class="n">chunks</span><span class="p">(</span><span class="s1">&#39;Elixir.MyModule.beam&#39;</span><span class="p">,</span> <span class="p">[</span><span class="ss">:abstract_code</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">attributes</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">elem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="ss">:function</span><span class="p">))</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="k">fn</span> <span class="p">{</span><span class="bp">_</span><span class="p">,</span> <span class="bp">_</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">arity</span><span class="p">,</span> <span class="bp">_</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="p">{</span><span class="n">name</span><span class="p">,</span> <span class="n">arity</span><span class="p">}</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Returns: [__info__: 1, bar: 0, foo: 0]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We&rsquo;ve learned how to introspect Elixir source code by extracting the AST and
ASG. It is my hope that this information will help you build the next great
developer tool for Elixir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Redis on macOS With Homebrew]]></title>
    <link href="http://www.moxleystratton.com/blog/2017/08/09/install-redis-on-macos-with-homebrew/"/>
    <updated>2017-08-09T10:02:41-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2017/08/09/install-redis-on-macos-with-homebrew</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew install redis</span></code></pre></td></tr></table></div></figure>


<h2>Upgrade</h2>

<p>If Redis is already installed, you might want to upgrade:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew upgrade redis</span></code></pre></td></tr></table></div></figure>


<h2>Verify</h2>

<p>Check to see if Redis is already running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis-cli</span></code></pre></td></tr></table></div></figure>


<p>If it&rsquo;s already running, you can probably stop here.</p>

<h2>Launch on System Boot</h2>

<p>Check to see if it is already set up to launch on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -l ~/Library/LaunchAgents | grep -i redis</span></code></pre></td></tr></table></div></figure>


<p>Make it launch on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents</span></code></pre></td></tr></table></div></figure>


<h2>Management</h2>

<p>Redis can be started and stopped with these two commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew services start redis
</span><span class='line'>brew services stop redis</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Elixir on macOS Using ASDF]]></title>
    <link href="http://www.moxleystratton.com/blog/2017/08/09/install-elixir-on-macos-using-asdf/"/>
    <updated>2017-08-09T09:45:01-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2017/08/09/install-elixir-on-macos-using-asdf</id>
    <content type="html"><![CDATA[<h2>Install asdf</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.3.0
</span><span class='line'>echo -e '\n. $HOME/.asdf/asdf.sh' &gt;&gt; ~/.bash_profile
</span><span class='line'>echo -e '\n. $HOME/.asdf/completions/asdf.bash' &gt;&gt; ~/.bash_profile
</span><span class='line'>. ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<h2>Install Erlang and Elixir Plugins</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
</span><span class='line'>asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git</span></code></pre></td></tr></table></div></figure>


<h2>Uninstall Erlang and Elixir managed by Brew</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew uninstall --force erlang
</span><span class='line'>brew uninstall --force elixir</span></code></pre></td></tr></table></div></figure>


<h2>Install Erlang</h2>

<p>Check what versions of Erlang are available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asdf list-all erlang</span></code></pre></td></tr></table></div></figure>


<p>Install and Use Erlang:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asdf install erlang 19.3
</span><span class='line'>asdf global erlang 19.3</span></code></pre></td></tr></table></div></figure>


<h2>Install Elixir</h2>

<p>Check what versions of Elixir are available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asdf list-all elixir</span></code></pre></td></tr></table></div></figure>


<p>Install and Use Elixir:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asdf install elixir 1.4.4
</span><span class='line'>asdf global elixir 1.4.4</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Low-Level ActiveRecord]]></title>
    <link href="http://www.moxleystratton.com/blog/2015/09/27/low-level-activerecord/"/>
    <updated>2015-09-27T10:58:40-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2015/09/27/low-level-activerecord</id>
    <content type="html"><![CDATA[<p>With many Rails projects, there is occasionally a need to bypass the normal
ActiveRecord API, and get closer to the low-level SQL API. Here are a few
useful methods that bypass the confines of everyday ActiveRecord.</p>

<h3>#find_by_sql</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_sql</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE id = 1&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns model instances for the given SQL string.</p>

<p><code>#find_by_sql</code> also accepts parametrized values, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_sql</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;SELECT * FROM users WHERE id = ?&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>#select_all</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  SELECT id, first_name, created_at</span>
</span><span class='line'><span class="s2">  FROM users</span>
</span><span class='line'><span class="s2">  WHERE id = 1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>         <span class="o">=&gt;</span> <span class="mi">202</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Trystan&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2015-09-05 15:44:51.597326&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns an array-like object of type <code>ActiveRecord::Result</code>. Each item in
the collection is a <code>Hash</code> representing a row in the results.</p>

<p>The <code>ActiveRecord::Result</code> contains information about the table and its columns.
It knows how to convert column values to <em>some of</em> their corresponding Ruby
types.</p>

<h3>#execute</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT id, first_name, created_at FROM users WHERE id=1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>         <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Trystan&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2015-09-05 15:44:51.597326&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns an array-like object that is specific on the database driver. For
PostgreSQL, this will be a <code>PG::Result</code>. Each item in the collection is a
<code>Hash</code>. The values of the Hash are strings and nils. No conversion is performed
to convert the values to the appropriate Ruby type, other than NULL to nil.</p>

<h3>#quote</h3>

<p>The <code>select_all</code> and <code>execute</code> methods have no built-in mechanism for escaping
values for the SQL statement.</p>

<p>Something like this is bad practice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  SELECT * FROM users WHERE email=&#39;</span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we&rsquo;re not sure what is in <code>email</code>. It could have an SQL injection
attack, or it could just have unexpected characters that will break
the query. To cover these
cases, ActiveRecord provides <code>#quote</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  SELECT * FROM users WHERE email=</span><span class="si">#{</span><span class="n">conn</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the SQL statement does not have single quote marks around the email.
<code>#quote</code> does that automatically.</p>

<h3>#sanitize_sql_array</h3>

<p>Using <code>#quote</code> can get unwieldy as more and more values need to be escaped.
There is a private method called <code>#sanitize_sql_array</code> that brings back the
parameterized escape mechanism that is present in ActiveRecord&rsquo;s higher-level
API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:sanitize_sql_array</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;SELECT * FROM users WHERE email=?&quot;</span><span class="p">,</span> <span class="n">email</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>#connection_config</h3>

<p>Sometimes you need to introspect the database connection details. Maybe you have an external utility that performs bulk operations against the database, and
it bypasses ActiveRecord entirely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">database_configuration</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;common&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;adapter&quot;</span>           <span class="o">=&gt;</span> <span class="s2">&quot;postgres&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;encoding&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;utf8&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;postgis_extension&quot;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;username&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span>              <span class="o">=&gt;</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span>              <span class="o">=&gt;</span> <span class="mi">5432</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;development&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;adapter&quot;</span>           <span class="o">=&gt;</span> <span class="s2">&quot;postgres&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;encoding&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;utf8&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;postgis_extension&quot;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;username&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span>              <span class="o">=&gt;</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span>              <span class="o">=&gt;</span> <span class="mi">5432</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;database&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;database_development&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;production&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;adapter&quot;</span>           <span class="o">=&gt;</span> <span class="s2">&quot;postgres&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;encoding&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;utf8&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;postgis_extension&quot;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;username&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span>              <span class="o">=&gt;</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span>              <span class="o">=&gt;</span> <span class="mi">5432</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;database&quot;</span>          <span class="o">=&gt;</span> <span class="s2">&quot;database_production&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>#with_connection</h2>

<p>Using a database connection and not returning is like opening a file and not
closing it. It can lead to connection leaks in some contexts.
ActiveRecord provides a block-style pattern for using a database connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection_pool</span><span class="o">.</span><span class="n">with_connection</span> <span class="k">do</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span>
</span><span class='line'>  <span class="n">users</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    SELECT * FROM users WHERE email=</span><span class="si">#{</span><span class="n">conn</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>#structure_load</h2>

<p>For times when you need to load a bunch of SQL statements from a file,
ActiveRecord provides <code>#structure_load</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">database_configuration</span><span class="o">[</span><span class="s1">&#39;development&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">sql_file</span> <span class="o">=</span> <span class="s2">&quot;tmp/foo.sql&quot;</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Tasks</span><span class="o">::</span><span class="no">DatabaseTasks</span><span class="o">.</span><span class="n">structure_load</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">sql_file</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching to Octopress From Wordpress]]></title>
    <link href="http://www.moxleystratton.com/blog/2014/11/29/switching-to-octopress-from-wordpress/"/>
    <updated>2014-11-29T11:34:20-08:00</updated>
    <id>http://www.moxleystratton.com/blog/2014/11/29/switching-to-octopress-from-wordpress</id>
    <content type="html"><![CDATA[<p><img src="http://cl.ly/image/1k3O2Y023s1u/octopress-atom.jpg" title="Octopress and Atom - A potent combination" alt="octopress post in atom" /></p>

<p>Wordpress has been my blogging platform for the last two years, and
Drupal for a few years before that. Both are written in PHP and both
were installed and maintained on a traditional shared hosting account.
I would have stuck with Wordpress if it weren&rsquo;t for it&rsquo;s lack of robust
Markdown language support. Writing a coder&rsquo;s blog requires code samples,
usually in multiple languages. Github&rsquo;s flavor of Markdown has proved to be
an excellent language for authoring content that includes code samples, and
Octopress supports it by default.</p>

<p><a href="http://octopress.org/">Octopress</a>
is a wrapper around <a href="http://jekyllrb.com/">Jekyll</a>, and Jekyll is well suited for
publishing a blog to a Github&rsquo;s Pages service. Since Jekyll only generates a
static site, it can be much faster than a PHP solution like Wordpress or Drupal.
When used in conjunction with the <a href="https://atom.io/">Atom text editor</a>,
Octopress becomes a powerful blogging platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes Clojure Is More Concise Than Ruby]]></title>
    <link href="http://www.moxleystratton.com/blog/2014/11/24/sometimes-clojure-is-more-concise-than-ruby/"/>
    <updated>2014-11-24T19:00:00-08:00</updated>
    <id>http://www.moxleystratton.com/blog/2014/11/24/sometimes-clojure-is-more-concise-than-ruby</id>
    <content type="html"><![CDATA[<p>I find that 90% of the time, Clojure is more verbose than Ruby. Here&rsquo;s one simple example where Clojure wins a conciseness battle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; Subtract two vectors in Clojure</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="p">[</span><span class="mi">10</span> <span class="mi">9</span> <span class="mi">8</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">b</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="nb">map - </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (9 7 5)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Subtract two vectors in Ruby</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span><span class="o">|</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># [9, 7, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is it about Ruby that makes it less concise in this example?</p>

<p>In my opinion, the OOP nature of Ruby gets in the way. In OOP, there is a message receiver
(the object), plus zero or more arguments. In Clojure, there is no receiver, only arguments.
In Ruby, the two arguments to Clojure&rsquo;s <code>map</code> call have to be split up into the receiver
and the first argument. Additionally, the arguments to Ruby&rsquo;s <code>map</code> arrive as a single
array instead of of two distinct scalar arguments. This requires the destructor
parentheses inside the <code>map</code> block.</p>

<p>The syntactical division between a receiver and it&rsquo;s arguments is usually not a problem.
But every once in a while, it gets in the way. Another division in OOP is between class
and instance. I&rsquo;ve found that this division can sometimes get in the way too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding the Source for a Given Rails Web Page]]></title>
    <link href="http://www.moxleystratton.com/blog/2014/05/29/finding-the-source-for-a-given-rails-web-page/"/>
    <updated>2014-05-29T12:00:00-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2014/05/29/finding-the-source-for-a-given-rails-web-page</id>
    <content type="html"><![CDATA[<p>These tips may help those of you who are relatively new to Rails, or maybe even if you&rsquo;re not.</p>

<!-- more -->


<h2>Common tips and tricks</h2>

<ul>
<li>Look at the URL path (e.g. <code>/users/100685/edit</code>).
Can the action and main view file be determined from CRUD/REST conventions?

<ul>
<li><code>/:model/edit</code> -> edit.html.slim</li>
<li><code>/:model/1234</code> -> show.html.slim</li>
<li><code>/:model/new</code> -> new.html.slim</li>
<li><code>/:model</code> -> index.html.slim</li>
</ul>
</li>
<li>Look up the path in routes.rb, or even more useful, run <code>rake routes</code></li>
</ul>


<h2>Finding a controller and action responsible for a given page</h2>

<ol>
<li>In development go to your server&rsquo;s output, and clear the screen (<code>Ctrl+L</code>,
for Linux, <code>Cmd-K</code> for OS X)</li>
<li>Refresh the web page</li>
<li>Back to the server&rsquo;s output, scroll to the top of the output. About the second
line of non-blank log output, you should see something like:
<code>Processing by UserseController#edit as HTML</code>. That&rsquo;s the
controller (<code>UsersController</code>) and action (<code>edit</code>).</li>
</ol>


<h2>Finding a view file for a given page</h2>

<ul>
<li>If in development, look at the server log. If it is too noisy, use
<code>tail -f log/development | grep Rendered</code> to cut out the noise.</li>
<li>If in development, add the <code>rails_view_annotator</code> gem to your Gemfile,
and look at the DOM or HTML source. It should have HTML comments identifying
the view partials responsible for their generated HTML.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Considering a Switch to the Atom Text Editor?]]></title>
    <link href="http://www.moxleystratton.com/blog/2014/03/16/considering-a-switch-to-the-atom-text-editor/"/>
    <updated>2014-03-16T12:00:00-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2014/03/16/considering-a-switch-to-the-atom-text-editor</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve probably heard of <a href="http://atom.io/">Atom, Github&rsquo;s new text editor</a>. Read
these checklists to help you decide whether it&rsquo;s an editor worth switching to.</p>

<!-- more -->


<h2>General Pros</h2>

<ul>
<li>Open Source</li>
<li>High-quality extension and enhancement infrastructure</li>
<li>View is programmable using good old HTML DOM and CSS</li>
<li>Well-known API model (NodeJS)</li>
<li>Built-in Github integration</li>
<li>Built-in, light Git integration</li>
<li><a href="https://www.youtube.com/watch?v=VGUemwCaBR0&amp;amp;feature=youtu.be">Realtime Markdown preview</a></li>
<li>Seamlessly tracks external file renames while the file is open</li>
<li>Browse archive files, like zip or tar.gz, like Emacs does.</li>
<li>UI and editing features basically a clone of Sublime Text</li>
<li>Free, while in Beta.</li>
</ul>


<h2>General Cons</h2>

<ul>
<li>In Beta. Some rough UX details.</li>
<li>No keyboard macros</li>
<li>No command documentation</li>
<li>Difficult to discover available commands</li>
<li>Currently only works on OS X (Windows and Linux planned)</li>
</ul>


<h2>For Sublime Users</h2>

<h3>Pros</h3>

<ul>
<li>Package manager is built in</li>
<li>Deep customization API</li>
<li>Fine-grained commands</li>
<li>Complete pane splitting and pane navigation</li>
<li>Smarter indentation of pasted text</li>
</ul>


<h3>Cons</h3>

<ul>
<li>2-3x slower, 2-3x more memory than ST3 (realistically, it&rsquo;s not as bad as it sounds)</li>
<li>No &ldquo;Jump Back&rdquo; feature, as found in ST3</li>
<li>No auto-highlighting matching strings of selected string</li>
<li>Can&rsquo;t open file in existing window, unless it lives within the window&rsquo;s directory</li>
<li>Missing key bindings for many search &amp; replace operations</li>
</ul>


<h2>For Vim and Emacs Users</h2>

<h3>Pros</h3>

<ul>
<li>Modern Application and UI, contemporary key bindings</li>
<li>Easy to learn</li>
<li>Built in Package manager, and standard package formats</li>
<li>View is good old HTML DOM, CSS</li>
<li>CoffeeScript is arguably better than eLisp and Vimscript</li>
<li>Editor API reaches deep into the editor</li>
<li>Project-wide fuzzy file finder, built in, fuss-free</li>
<li>Buffer-wide fuzzy symbol finder, built in, fuss-free</li>
<li>Project-wide string search</li>
<li>Large number of homerow-close key bindings (many of them are Emacs compatible)</li>
<li>Pane splitting on par with Vim and Emacs</li>
<li>Multi selections</li>
<li>Code Snippets</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Editor API doesn&rsquo;t go as deep as Emacs. Lacks rich callback API that Emacs has.</li>
<li>No cursor history, so no command for going back to the last location without using bookmarks</li>
<li>No cursor navigation around, or editing operations on, symbol definitions (e.g., methods)</li>
<li>Unlike Emacs, no built-in shell console (package under development)</li>
<li>Keyboard navigation of file tree is cumbersome, but will likely improve over time.</li>
<li>Missing a lot of the cool text navigation and editing commands available to Vim and Emacs</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Cellular Automata]]></title>
    <link href="http://www.moxleystratton.com/blog/2012/12/01/simple-cellular-automata/"/>
    <updated>2012-12-01T12:00:00-08:00</updated>
    <id>http://www.moxleystratton.com/blog/2012/12/01/simple-cellular-automata</id>
    <content type="html"><![CDATA[<p>I released a very simple cellular automata explorer. <a href="http://www.moxleystratton.com/cellauto/cellauto.html">Try it out here</a>.
See the <a href="https://github.com/moxley/cellauto">Github page</a> for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ten Secret Key Bindings From OS X]]></title>
    <link href="http://www.moxleystratton.com/blog/2012/05/11/ten-secret-key-bindings/"/>
    <updated>2012-05-11T12:00:00-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2012/05/11/ten-secret-key-bindings</id>
    <content type="html"><![CDATA[<p>Did you know that when using these applications:</p>

<ul>
<li>Any application on OS X, except Vim and MS products</li>
<li>Bash, or any console program with Readline support</li>
</ul>


<!-- more -->


<p>These key bindings are available:</p>

<ol>
<li>Control-A - Move to beginning of line</li>
<li>Control-E - Move to end of line</li>
<li>Control-F - Move forward one column</li>
<li>Control-B - Move backward one column</li>
<li>Control-N - Move to next line</li>
<li>Control-P - Move to previous line</li>
<li>Control-D - Delete next character</li>
<li>Control-H - Delete previous character</li>
<li>Control-K - Delete from cursor to end of line</li>
<li> Control-Y - Paste what was deleted with Control-K</li>
</ol>


<p>It seems silly, but the thing I love the most about OS X is the ubiquity of these key bindings. Any text editing, from writing a blog post in Chrome, to writing code in TextMate is immensely sweeter with the availability of the above key bindings. One need not leave the keyboard&rsquo;s home row to do much of anything when they&rsquo;re available.</p>

<p>Whether you use Emacs or Vim or another text editor, learn to use key bindings that allow you to keep your fingers close to the home row. Your text editing will be faster an more efficient.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injection]]></title>
    <link href="http://www.moxleystratton.com/blog/2012/04/13/injection/"/>
    <updated>2012-04-13T12:00:00-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2012/04/13/injection</id>
    <content type="html"><![CDATA[<p>Within the world of application development, there is a conspiracy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE username=&#39;&quot;</span> <span class="o">.</span> <span class="nv">$username</span> <span class="o">.</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>What&rsquo;s wrong with this code? The problem is that <code>$username</code> needs to be escaped before it can be put into the SQL statement. If <code>$username</code> contains single quotes, the SQL statement will do something you did not intend. If you already know this, stick around, there&rsquo;s more to this story.</p>

<p>Without escaping the data before it is added to the SQL, the code is vulnerable to Injection attack. Injection is the top security risk in applications, according to <a href="https://www.owasp.org/index.php/Top_10_2010-Main" title="">OWASP&rsquo;s Top 10 Security Risks</a>>.</p>

<p>Here&rsquo;s the corrected code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE username=&#39;&quot;</span> <span class="o">.</span> <span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$username</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>See the really long function name <code>mysql_real_escape_string()</code>? The long length is part of a conspiracy to discourage you from escaping injected data.</p>

<p>If you work much with SQL, you may also know about parameterized SQL statements, which automatically escape the injected data, and they reduce the need to concatenate bits of SQL together.</p>

<p>&hellip;</p>

<p>Let&rsquo;s pull out the essential parts from the PHP example. The <code>$username</code> value is <em>data</em>. It&rsquo;s being <em>injected</em> into the source code of a computer <em>language</em> called SQL. Notice these three keywords:</p>

<ol>
<li><em>data</em></li>
<li><em>injection</em></li>
<li><em>language</em></li>
</ol>


<p>Look for these words as we move on.</p>

<p>Here&rsquo;s another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;&lt;?php echo </span><span class="si">$username</span><span class="s2"> ?&gt;&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The situation is the same as before, but now the language is HTML. We&rsquo;re still <em>injecting</em> some <em>data</em>, <code>$username</code>, into the <em>language</em>. And like the first SQL example, <code>$username</code> is not escaped.</p>

<p>The security attack that leverages this defect is called Cross-Site Scripting (XSS). XSS is the number two security risk, according to <a href="https://www.owasp.org/index.php/Top_10_2010-Main">OWASP&rsquo;s Top Ten list</a>. XSS is actually just another case of Injection. The defect that causes these two vulnerabilities is the same kind of defect&ndash; failing to escape data that is being injected into a language.</p>

<p>What does PHP provide you to avert certain disaster?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">input</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;&lt;?php echo htmlspecialchars(</span><span class="si">$username</span><span class="s2">)?&gt;&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you weren&rsquo;t thinking of it already, I just want to say, PHP is one <em>ugly</em> language.</p>

<p>With a name like <code>htmlspecialchars()</code>, you might guess it was not intended to be used often. Actually, nine out of ten times it is perfectly appropriate to use <code>htmlspecialchars()</code>. If the length of <code>htmlspecialchars()</code> bothers you as much as it does me, I suggest writing your own shortcut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">h</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;input name=&quot;username&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">h</span><span class="p">(</span><span class="nv">$username</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only when you really want to inject actual HTML would you not use <code>htmlspecialchars()</code>. And when you do so, be sure the HTML is either trusted or sanitized.</p>

<p>If you are ever in the position to choose a templating language, choose one that escapes injected data by default, because that&rsquo;s what is needed 90% of the time. Yes, 90%. Think about it: how often do you inject HTML into HTML, compared to how often you inject plain old data? Not very often. Note that the top PHP templating languages <em>do not</em> escape data by default. The default templating language for Rails 3&ndash; ERB&ndash; escapes data by default. Most of the JavaScript templating languages escape by default.</p>

<p>Next, we&rsquo;ll move on to JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#notice&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="err">&#39;</span><span class="o">&lt;</span><span class="err">/p&gt;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you see the pattern? The <em>language</em> is HTML, the <em>data</em> is <code>message</code>. This time, it is JavaScript <em>injecting</em> data into another language. Do you know what JavaScript gives us to escape <code>message</code> for injecting it into HTML? Nothing. Absolutely nothing. What does jQuery give us for the task?</p>

<p>Nothing.</p>

<p>Yes, really. Escaping data for HTML seems like such an essential task for web programming, yet the designers of both JavaScript and jQuery have provided nothing for it. This is part of the conspiracy.</p>

<p>With JavaScript, we must write our own function to escape data for HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Escape for HTML</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span> <span class="o">==</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">str</span> <span class="o">||</span> <span class="o">!</span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">trans</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;&lt;&#39;</span><span class="o">:</span> <span class="s1">&#39;&amp;lt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="o">:</span> <span class="s1">&#39;&amp;gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;&quot;&#39;</span><span class="o">:</span> <span class="s1">&#39;&amp;quot;&#39;</span><span class="p">,</span> <span class="s2">&quot;&#39;&quot;</span><span class="o">:</span> <span class="s1">&#39;&amp;#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;&amp;&#39;</span><span class="o">:</span> <span class="s1">&#39;&amp;amp;&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">=</span> <span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">out</span> <span class="o">+=</span> <span class="nx">trans</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">||</span> <span class="nx">c</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">out</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now &ldquo;message&rdquo; can be escaped:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#notice&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">h</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">+</span> <span class="err">&#39;</span><span class="o">&lt;</span><span class="err">/p&gt;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So there you have it: three examples of injection, and three solutions for escaping data before injecting it into language code.</p>

<p>Using a templating language that escapes by default is great, and so is using parameterized SQL statements. But don&rsquo;t think that you don&rsquo;t have to worry about escaping data again. If you work with multiple languages, you will eventually need to call upon an escape function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Tutorial for the Non-Lisp Programmer]]></title>
    <link href="http://www.moxleystratton.com/blog/2008/05/01/clojure-tutorial-for-the-non-lisp-programmer/"/>
    <updated>2008-05-01T12:00:00-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2008/05/01/clojure-tutorial-for-the-non-lisp-programmer</id>
    <content type="html"><![CDATA[<p>I intend to keep this tutorial as accurate and up-to-date as possible. If you have any suggestions for changes, please leave a comment at the bottom of this page.</p>

<p>Clojure is a functional lisp dialect that uses the Java Virtual Runtime as its platform. The language home page is at <a href="http://clojure.org/">http://clojure.org/</a>.</p>

<!-- more -->


<h2>Table of Contents</h2>

<ul>
<li><a href="#quick-comparison">A Quick Comparison</a></li>
<li><a href="#install">Installing Clojure</a></li>
<li><a href="#atoms">Atoms</a></li>
<li><a href="#vectors">Vectors</a></li>
<li><a href="#lists">Lists</a></li>
<li><a href="#maps-sets">Maps and Sets</a></li>
<li><a href="#defs">Defining Variables and Functions</a></li>
<li><a href="#special-forms">Special Forms</a></li>
<li><a href="#looping-iterating">Looping and Iterating</a></li>
<li><a href="#sequences">Sequences</a></li>
<li><a href="#java-integration">Java Integration</a></li>
<li><a href="#libraries">Using Libraries</a></li>
<li><a href="#resources">Additional Resources</a></li>
</ul>


<p><a name="quick-comparison"></a></p>

<h2>A Quick Comparison</h2>

<p>In C-like languages, a function call might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">do_something_with</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Clojure, the same function call would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">do-something-with</span> <span class="nv">value1</span> <span class="nv">value2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, Clojure&rsquo;s syntax differs in these ways:</p>

<ol>
<li>The opening parenthesis is to the left of the function name.</li>
<li>There are no commas delimiting the function parameters.</li>
<li>By convention, words in a function name are separated by dashes.</li>
</ol>


<p>There&rsquo;s not a huge difference.</p>

<p>Here&rsquo;s how adding two values might look in a C-like language:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">value1</span> <span class="o">+</span> <span class="n">value2</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here’s how it would look in Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="nv">value1</span> <span class="nv">value2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In C, the plus operator goes in between the two operands. In Clojure, the operator is always first, and there can be any number of operands. In this way, there is no syntactic difference between operators and function calls. They are the same. This is a thematic difference between Clojure and non-Lisp languages: Clojure is more simple.</p>

<p><a name="install"></a></p>

<h2>Installing Clojure</h2>

<p>A fast and easy way to get started with Clojure is to download and run <a href="https://github.com/arthuredelstein/clooj#readme">Clooj</a>. Clooj is an Integrated Development Environment for Clojure.</p>

<p>As an alternative, the Clojure website provides <a href="http://clojure.org/getting_started">instructions for installing Clojure the traditional way</a>.</p>

<p>The primary way of interacting with Clojure is through the REPL (Read-Evaluate-Print-Loop). The REPL Reads expressions that you give it, Evaluates the expressions, Prints the value that is the result, and Loops around for more input.</p>

<p><a name="atoms"></a></p>

<h1>Atoms</h1>

<p>There are two categories of Clojure expressions, <em>atoms</em> and <em>lists</em>. Atoms are like the primitive types in other languages. Let’s use the <span class="caps">REPL</span> to explore some atoms.</p>

<h3>Numbers</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>The number 5 is evaluated and the result is displayed.</p>

<h3>Booleans</h3>

<p>Here’s another atom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="nv">true</span>
</span><span class='line'><span class="nv">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure supports boolean <code>TRUE</code> and <code>FALSE</code> values, represented as <code>true</code> and <code>false</code> respectively.</p>

<h3>Nil</h3>

<p>Here is another important atom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="nv">nil</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is Clojure’s name for no-value, or null. It resolves to Java’s <code>null</code> value.</p>

<h3>Strings</h3>

<p>Here is a Clojure string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'><span class="s">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure strings follow the same rules as Java strings, so for instance, <code>"\t"</code> represents the ASCII <code>TAB</code> character. The Java API is the primary way to make calculations on a string.</p>

<h3>Symbols</h3>

<p>Symbols are stand-in names for values. They&rsquo;re sort of like what you would call a constant in other languages. Clojure doesn&rsquo;t have variables. And unlike other languages, Clojure makes a distinction between a symbol and its value.</p>

<p>When a symbol is evaluated, its value is returned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="nv">*file*</span>
</span><span class='line'><span class="s">&quot;NO_SOURCE_PATH&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="nv">*compile-path*</span>
</span><span class='line'><span class="s">&quot;classes&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="nv">*clojure-version*</span>
</span><span class='line'><span class="p">{</span><span class="ss">:major</span> <span class="mi">1</span>, <span class="ss">:minor</span> <span class="mi">3</span>, <span class="ss">:incremental</span> <span class="mi">0</span>, <span class="ss">:qualifier</span> <span class="nv">nil</span><span class="p">}</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="nv">*command-line-args*</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="nv">+</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;core$_PLUS_</span> <span class="nv">clojure.core$_PLUS_</span><span class="o">@</span><span class="mi">6</span><span class="nv">d581e80&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above shows some of Clojure&rsquo;s built-in symbols. By convention, built-in symbols begin and end with &lsquo;*&rsquo; if they bind to data. The last symbol shown &ldquo;+&rdquo; is a built-in function.</p>

<h3>Keywords</h3>

<p>Keywords are like symbols, except that they do not bind to an arbitrary value. They always bind to themselves. Keywords always start with a colon (<code>:</code>). Here are some keywords:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="ss">:a</span>
</span><span class='line'><span class="ss">:a</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="ss">:_123</span>
</span><span class='line'><span class="ss">:_123</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="ss">:KEY</span>
</span><span class='line'><span class="ss">:KEY</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="lists"></a></p>

<h2>Lists</h2>

<p>Near the beginning of the tutorial we saw a function call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">=&gt;</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function calls use lists to define the call. Lists are comprised of an opening and closing parenthesis, and zero or more elements. Each element is separated by whitespace or commas.</p>

<p>Lists can be both a data structure and a functional call form. When used as a function call, the first element of the lists is a function. Any remaining elements in the list are the function&rsquo;s arguments.</p>

<p>When a list is used to perform an operation, it is called a <em>form</em>. The function element of the form is referred to as the <em>operator</em>. Strictly, it isn&rsquo;t always a function. There are three kinds of forms: <em>functions</em>, <em>macros</em>, and <em>special forms</em>.</p>

<p>Although the list can be used to perform operations, it can also be used to represent data. There is an important consequence of code and data sharing the same syntax: code can be manipulated as if it were data because it <em>is</em> data.</p>

<p>One way to use lists simply as data is to use Clojure’s built-in operation, <code>list</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">list </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">list </span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>List items can be atoms, other lists, or other data structures that are part of Clojure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">list </span><span class="ss">:foo</span> <span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="ss">:foo</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure also has a short-cut syntax for creating a list as data. Just prepend the list with a single-quote character:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a list this way has a slightly different effect. The list items are left unevaluated. They can be undefined, and Clojure won&rsquo;t complain.</p>

<p>Using some of Clojure’s built-in operations, information can be extracted from the data. The following expression returns the first element of the given list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'><span class="s">&quot;one&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another operation returns all the elements except the first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">rest </span><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="vectors"></a></p>

<h2>Vectors</h2>

<p>The vector is another data structure, similar to a list. Vectors are zero-based arrays. They can contain any value, and any mix of value types, just like lists. Here are a few examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">[</span><span class="ss">:a</span> <span class="mi">0</span> <span class="s">&quot;hello&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:a</span> <span class="mi">0</span> <span class="s">&quot;hello&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">[]</span>
</span><span class='line'><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>  The nice thing about vectors is you don&rsquo;t have to do anything special to use them as data as you do with lists.</p>

<p>  Other languages give you a handy syntax for getting an array&rsquo;s element by its index. So, how is this accomplished with Clojure&rsquo;s vectors? Perform an operation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">([</span><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span><span class="p">]</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we fetch the value at index <code>2</code>, which is <code>9</code>. The vector itself is the operator of the form. This may seem a little weird at first, but eventually it makes a lot of sense. Its argument is <code>2</code>. The general form for this operation is <code>(vector index)</code>. Compare this with JavaScript, which is similar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the same operation on vectors as we did earlier with lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="p">[</span><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span><span class="p">])</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">last </span><span class="p">[</span><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span><span class="p">])</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">rest </span><span class="p">[</span><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="mi">8</span> <span class="mi">9</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last one was a bit unexpected. It didn&rsquo;t return a vector. It looks like a list instead.</p>

<p><a name="maps-sets"></a></p>

<h2>Maps and Sets</h2>

<p>In addition to lists as a data type, Clojure provides syntax for defining <em>maps</em> and <em>sets</em>.</p>

<p>Maps define a set of unique key-value pairs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The map above maps the string <code>"a"</code> to the number <code>1</code>, <code>"b"</code> to the number <code>2</code>, and <code>"c"</code> to the number <code>3</code>. The commas between each pair are optional, to enhance readability of the code. Clojure treats the commas nearly the same as whitespace. You can put commas anywhere between elements of an expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span> <span class="s">&quot;b&quot;</span> <span class="mi">2</span> <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">{</span><span class="s">&quot;a&quot;</span>, <span class="mi">1</span>, <span class="s">&quot;b&quot;</span>, <span class="mi">2</span>, <span class="s">&quot;c&quot;</span>, <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">{</span><span class="s">&quot;a&quot;</span>  <span class="mi">1</span> ,<span class="s">&quot;b&quot;</span> <span class="mi">2</span> ,<span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that Clojure REPL adds commas to the formatted return value.</p>

<p>Once a map is defined, its values can be looked up from key values using the <code>get</code> form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;d&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, there’s a shortcut for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">({</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">({</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">({</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">({</span><span class="s">&quot;a&quot;</span> <span class="mi">1</span>, <span class="s">&quot;b&quot;</span> <span class="mi">2</span>, <span class="s">&quot;c&quot;</span> <span class="mi">3</span><span class="p">}</span> <span class="s">&quot;d&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to Vectors and lists, Maps can be used as functions of their keys.</p>

<p>There is yet a third way to get a value from a key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="ss">:a</span> <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span>, <span class="ss">:b</span> <span class="mi">2</span>, <span class="ss">:c</span> <span class="mi">3</span><span class="p">})</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="ss">:b</span> <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span>, <span class="ss">:b</span> <span class="mi">2</span>, <span class="ss">:c</span> <span class="mi">3</span><span class="p">})</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="ss">:c</span> <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span>, <span class="ss">:b</span> <span class="mi">2</span>, <span class="ss">:c</span> <span class="mi">3</span><span class="p">})</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="ss">:d</span> <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span>, <span class="ss">:b</span> <span class="mi">2</span>, <span class="ss">:c</span> <span class="mi">3</span><span class="p">})</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>It’s important to get familiar with the last two usages, as they are commonly used in Clojure programs.</p>

<p><a name="defs"></a></p>

<h2>Defining Variables and Functions</h2>

<h3><code>def</code></h3>

<p>To bind a symbol to a value, use the <code>def</code> form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">x</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/x</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="nv">x</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">5</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">my-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/my-list</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="nv">my-list</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">last </span><span class="nv">my-list</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>There a a few things going on when a variable is created. What gets returned from <code>def</code> is a <em>var</em>, which is a an object that holds a value, such as <em>5</em>. Also, a symbol is created, and that symbol is bound to the var.</p>

<h3><code>defn</code></h3>

<p>Functions can be created using <code>defn</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defn </span><span class="nv">election-year?</span> <span class="p">[</span><span class="nv">year</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nb">rem </span><span class="nv">year</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/election-year?</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">election-year?</span> <span class="mi">2007</span><span class="p">)</span>
</span><span class='line'><span class="nv">false</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">election-year?</span> <span class="mi">2008</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Functions are just a kind of object that can be called.</p>

<p>The first argument to a <code>defn</code> is the function’s name, which becomes a symbol bound to the function. The second argument is the function’s argument list. Argument lists are always represented by a vector. The remaining arguments of <code>defn</code> can be one or more expressions. The result of the last expression is used as the function’s return value.</p>

<h3>Using <code>fn</code></h3>

<p>Anonymous functions can be created using <code>fn</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="nv">user.eval__2384$fn__2386</span><span class="o">@</span><span class="nv">c4b579</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since functions are just objects, they can be bound to a symbol (assigned to a variable):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">plus-one</span>
</span><span class='line'>     <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/plus-one</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">plus-one</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>defn</code> form is just a macro that turns its contents into a <code>def</code> + <code>fn</code> combination.</p>

<h3>The <code>doc</code> form</h3>

<p>Nearly all the forms in Clojure have built-in documentation. To quickly find out about a form, pass the form’s name to the <code>doc</code> form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">doc </span><span class="nv">first</span><span class="p">)</span>
</span><span class='line'><span class="nv">-------------------------</span>
</span><span class='line'><span class="nv">clojure/first</span>
</span><span class='line'><span class="p">([</span><span class="nv">coll</span><span class="p">])</span>
</span><span class='line'>  <span class="nv">Returns</span> <span class="nv">the</span> <span class="nb">first </span><span class="nv">item</span> <span class="nv">in</span> <span class="nv">the</span> <span class="nv">collection.</span> <span class="nv">Calls</span> <span class="nb">seq </span><span class="nv">on</span> <span class="nv">its</span>
</span><span class='line'>    <span class="nv">argument.</span> <span class="nv">If</span> <span class="nv">coll</span> <span class="nv">is</span> <span class="nv">nil</span>, <span class="nv">returns</span> <span class="nv">nil.</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Documenting a function</h3>

<p>There are multiple ways to add documentation to a function. Here is the easiest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defn </span><span class="nv">plus-one</span>
</span><span class='line'>  <span class="s">&quot;Returns a number one greater than x&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/plus-one</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">doc </span><span class="nv">plus-one</span><span class="p">)</span>
</span><span class='line'><span class="nv">-------------------------</span>
</span><span class='line'><span class="nv">user/plus-one</span>
</span><span class='line'><span class="p">([</span><span class="nv">x</span><span class="p">])</span>
</span><span class='line'>  <span class="nv">Returns</span> <span class="nv">a</span> <span class="nv">number</span> <span class="nv">one</span> <span class="nv">greater</span> <span class="nv">than</span> <span class="nv">x</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defn </span><span class="nv">plus-one</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:doc</span> <span class="s">&quot;Returns a number one greater than x&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/plus-one</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">doc </span><span class="nv">plus-one</span><span class="p">)</span>
</span><span class='line'><span class="nv">-------------------------</span>
</span><span class='line'><span class="nv">user/plus-one</span>
</span><span class='line'><span class="p">([</span><span class="nv">x</span><span class="p">])</span>
</span><span class='line'>  <span class="nv">Returns</span> <span class="nv">a</span> <span class="nv">number</span> <span class="nv">one</span> <span class="nv">greater</span> <span class="nv">than</span> <span class="nv">x</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="special-forms"></a></p>

<h2>Special Forms</h2>

<p>Clojure has several built-in forms, known collectively as <em>special forms</em>. This section introduces them and delves further into the types of expressions that are possible with Clojure.</p>

<h3>The <code>str</code> form:</h3>

<p>The <code>str</code> form concatenates two or more values, converting them to strings if necessary, and returns the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Hello,&quot;</span> <span class="s">&quot; world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">str </span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;5&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Value: &quot;</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;Value: 5&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The <code>if</code> form</h3>

<p>The <code>if</code> form is similar to the <code>if</code> statement in C-like languages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="nv">true</span> <span class="s">&quot;yes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;yes&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="nv">false</span> <span class="s">&quot;yes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="nv">false</span> <span class="s">&quot;yes&quot;</span> <span class="s">&quot;no&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;no&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="nv">nil</span> <span class="s">&quot;yes&quot;</span> <span class="s">&quot;no&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;no&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="s">&quot;&quot;</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="mi">0</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="nv">true</span> <span class="s">&quot;yes&quot;</span> <span class="s">&quot;no&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;yes&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;yes&quot;</span> <span class="s">&quot;no&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;yes&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">5</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">5</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the first argument, converted to a boolean, is true, then the second argument is returned. Otherwise the third argument is returned. The third argument is optional.</p>

<p>In Clojure, when a value is converted to boolean, it is always <span class="caps">TRUE</span>, unless the value is <code>false</code> or <code>nil</code>. There are many forms that make decisions based on whether a value will be true or false when converted to boolean.</p>

<p>The <code>if</code> form works a lot like the C-language ternary operator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">v</span> <span class="nb">= </span><span class="nv">true</span> <span class="nv">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ternary operator is usually used in places where an <code>if</code> statement is too verbose. However, since Clojure’s <code>if</code> form is already succinct, there is no need for a separate operator. You can still break up the expression onto separate lines when it makes sense to do so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;foobar&quot;</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;foo&quot;</span> <span class="s">&quot;bar&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="s">&quot;&#39;foo&#39; plus &#39;bar&#39; equals &#39;foobar&#39;&quot;</span>
</span><span class='line'>  <span class="s">&quot;&#39;foo&#39; plus &#39;bar&#39; does not equal &#39;foobar&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;&#39;foo&#39; plus &#39;bar&#39; equals &#39;foobar&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The <code>do</code> form:</h3>

<p>The <code>do</code> form is used to execute a number of operations in sequence. Typically in functional programming, expressions are contained by, or are containers for, other expressions, so there isn’t a need to execute operations one after the other. This is fine when the expressions produce a value that will be used by a containing expression. However, there are some occasions where the value of an expression isn’t used. If such an expression does anything useful at all, it is said to have side effects. For example, writing something to standard output, or a file, or a database, are all examples of side-effects.</p>

<p>Clojure provides the <code>println</code> form for writing to standard output. In order to use <code>println</code> within an expression whose return value we care about, we need to put it in a <code>do</code> expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello.&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="nv">Hello.</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello.&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello again.&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="nv">Hello.</span>
</span><span class='line'><span class="nv">Hello</span> <span class="nv">again.</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>do</code> operation executes each expression in sequence and returns the result of the last expression.</p>

<p>The <code>do</code> form isn’t the only form that lets you perform a number of operations in sequence. <code>let</code>, <code>defn</code> and <code>fn</code> all let you do that too.</p>

<p>One of the things that takes some getting used to is that Clojure is a functional language. All expressions in Clojure return a value. Often, a single Clojure expression will span several lines, where the C-like programmer would write it out the same logic as a block of code consisting of several distinct statements. The distinct statements may assign a value to a variable to be used in the following statements. Programs written in functional languages tend to have larger statements spanning multiple lines rather than a multiline block of code split into smaller statements. This way of building programs can take some getting used to, but once you’ve learned it, the new way can be just as easy as the old. There are several advantages to writing programs this way.</p>

<h3>The <code>when</code> form</h3>

<p>The <code>when</code> form is similar to the <code>if</code> form. The differences are that there is no “else” condition, and more than one expression can be added to the <code>when</code> form for evaluation when the condition is <span class="caps">TRUE</span>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="nv">nil</span> <span class="s">&quot;Should return &#39;nil&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="nv">false</span> <span class="s">&quot;Should return &#39;nil&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="nv">true</span> <span class="s">&quot;Yes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;Yes&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="nv">true</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="nv">true</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="nv">true</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Yes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">world</span>
</span><span class='line'><span class="s">&quot;Yes&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">5</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>  <span class="s">&quot;Yes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;Yes&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The <code>let</code> form</h3>

<p>The <code>let</code> operator is used for setting up and holding temporary values to be used by a containing operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="mi">2</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">8</span><span class="p">))</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="mi">2</span> <span class="nv">y</span> <span class="mi">8</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="mi">2</span> <span class="nv">y</span> <span class="mi">8</span><span class="p">]</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="mi">3</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">color</span> <span class="s">&quot;Red&quot;</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Color is: &quot;</span> <span class="nv">color</span><span class="p">))</span>
</span><span class='line'><span class="s">&quot;Color is: Red&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">color</span> <span class="s">&quot;Red&quot;</span> <span class="nv">phrase</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Color is: &quot;</span> <span class="nv">color</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Clojure says: &quot;</span> <span class="nv">phrase</span><span class="p">))</span>
</span><span class='line'><span class="s">&quot;Clojure says: Color is: Red&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>let</code> form creates a temporary var (<code>x</code> and <code>y</code> in this case), that can only be used inside the body of the <code>let</code> expression. A vector is used to define the var and its value, and vectors are also used by other Clojure forms to declare a list of temporary variables and their assigned values. The vector contains name-value pairs.</p>

<p><a name="looping-iterating"></a></p>

<h2>Looping and Iterating</h2>

<p>Here are three ways to loop while incrementing an index from 0 to 4 (5 iterations):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">i</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">i</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">i</span><span class="p">))))</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">dorun </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="mi">5</span><span class="p">)]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">println </span><span class="nv">i</span><span class="p">)))</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="mi">5</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="nv">i</span><span class="p">))</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first example uses the <code>loop</code> form, which provides the most flexibility, but requires the most syntactical overhead. The second and third examples are examples of iterating over a sequence, which is a more common kind of looping. The <code>dorun</code> and <code>doseq</code> calls suppress the return values of the containing expressions.</p>

<p>Let’s look at the <code>loop</code> form a little closer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">i</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">i</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;i:&quot;</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">i</span><span class="p">))))</span>
</span><span class='line'><span class="nv">i</span><span class="err">:</span> <span class="mi">0</span>
</span><span class='line'><span class="nv">i</span><span class="err">:</span> <span class="mi">1</span>
</span><span class='line'><span class="nv">i</span><span class="err">:</span> <span class="mi">2</span>
</span><span class='line'><span class="nv">i</span><span class="err">:</span> <span class="mi">3</span>
</span><span class='line'><span class="nv">i</span><span class="err">:</span> <span class="mi">4</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, the temporary symbol <code>i</code> is bound to a value of <code>0</code>. The <code>when</code> statement checks to see if <code>i</code> is less than <code>5</code>. If the test passes, the two expressions inside are evaluated. The <code>println</code> expression outputs the value of <code>i</code>. Next, the <code>recur</code> form is evaluated, which instructs the loop to iterate again with a new value for <code>i</code>. The <code>(inc i)</code> is short for <code>(+ i 1)</code>.</p>

<p>Without the <code>recur</code>, a <code>loop</code> expression behaves exactly the same as a <code>let</code> expression.</p>

<p><a name="sequences"></a></p>

<h2>Sequences</h2>

<p>Sequences are in a sense, the core of idiomatic Clojure programming. Understand sequences and the forms that work with them, and you will have cleared one of the biggest hurdles to writing significant Clojure programs.</p>

<p>At first glance, a Sequence looks like another data structure. However, a Sequence is not a data structure. It is an interface, or view, into a data structure. A sequence can be derived from a collection. The relation between collection and sequence is similar to the relation between database table and database view.</p>

<p><a href="http://clojure.org/sequences">Clojure’s section on Sequences</a> gives an excellent definition.</p>

<p>Let’s get a sequence from a vector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">seq </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This bit of code doesn’t merely convert the vector into a list. It calls on the vector to produce a sequence of the vector. The <span class="caps">REPL</span> (Read, Evaluate, Print, Loop), as part of its ‘Print’ step, uses the sequence to produce a list so that something meaningful can be displayed.</p>

<p>One way to keep the <span class="caps">REPL</span> from creating a list from the sequence is to enclose the expression in another expression that doesn’t consume the sequence. For example, a method call of the sequence will not consume the sequence. Take <code>getClass()</code> for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">.getClass</span> <span class="p">(</span><span class="nb">seq </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]))</span>
</span><span class='line'><span class="nv">clojure.lang.APersistentVector$Seq</span>
</span></code></pre></td></tr></table></div></figure>


<p>What gets returned is an APersistentVector$Seq, which is the class that represents a vector’s sequence.</p>

<p>All of Clojure’s built-in data structures have methods to produce a sequence. The sequence interface is formally named clojure.lang.iSeq, or iSeq.</p>

<h3><code>first</code></h3>

<p>Use <code>first</code> to get the first item in a sequence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">seq </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]))</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>first</code> will also take a vector directly, implicitly converting it into a sequence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="p">[</span><span class="s">&quot;a&quot;</span> <span class="s">&quot;b&quot;</span> <span class="s">&quot;c&quot;</span><span class="p">])</span>
</span><span class='line'><span class="s">&quot;a&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="s">&quot;B&quot;</span> <span class="s">&quot;C&quot;</span><span class="p">))</span>
</span><span class='line'><span class="s">&quot;A&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span><span class="p">))</span>
</span><span class='line'><span class="ss">:a</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of the sequence forms do this implicit conversion, so you can pass any collection that provides an iSeq interface, including any of Clojure’s built-in collection types.</p>

<h3><code>rest</code></h3>

<p><code>rest</code> produces a sequence that consists of every item of the original sequence, minus the first item.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">rest </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">rest </span><span class="p">[</span><span class="s">&quot;a&quot;</span> <span class="s">&quot;b&quot;</span> <span class="s">&quot;c&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="s">&quot;b&quot;</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">rest </span><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="s">&quot;B&quot;</span> <span class="s">&quot;C&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="s">&quot;C&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">rest </span><span class="p">[</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="ss">:b</span> <span class="ss">:c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind that no new data structure is created. <code>rest</code> only creates a logical list (a sequence). It is up to the caller to create a data structure, if needed. In the examples above, the caller is the <span class="caps">REPL</span>, and it collects the sequence into a list so that it can display something meaningful. It is computationally inexpensive to create a sequence.</p>

<h3><code>cons</code></h3>

<p><code>cons</code> creates a new sequence by prepending an element onto a collection. The element is the first argument, and the collection is the second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">cons </span><span class="ss">:a</span> <span class="p">[</span><span class="ss">:b</span> <span class="ss">:c</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, no data structure is created by <code>cons</code>. The resulting sequence internally consists of separate pointers to the first and second arguments of <code>cons</code>. To the user or consumer of the sequence, it appears as one continuous sequence.</p>

<p><a name="java-integration"></a></p>

<h2>Java Integration</h2>

<p>Clojure provides the ability to interface with Java objects and primitives. Knowing how to do this is essential for non-trival programs.</p>

<p>Let’s start by instantiating a Java <code>java.util.Date</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">new </span><span class="nv">java.util.Date</span><span class="p">)</span>
</span><span class='line'><span class="nv">Mon</span> <span class="nv">May</span> <span class="mi">26</span> <span class="mi">10</span><span class="ss">:25:25</span> <span class="nv">PDT</span> <span class="mi">2008</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure instantiates the <code>Date</code> object, then calls and displays its <code>toString()</code> method as a visual representation of the object.</p>

<p>To pass arguments to the object’s constructor, just include them in the call to <code>new</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">new </span><span class="nv">StringBuffer</span> <span class="s">&quot;This is the initial value&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">This</span> <span class="nv">is</span> <span class="nv">the</span> <span class="nv">initial</span> <span class="nv">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is also a shortcut syntax for instantiation. Replace the <code>new</code> operator and the Java class with only the Java class, but with a period appended to its name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">StringBuffer.</span> <span class="s">&quot;This is the initial value&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">This</span> <span class="nv">is</span> <span class="nv">the</span> <span class="nv">initial</span> <span class="nv">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>To call a method on an instance, use the special dot-method (<code>.&lt;method&gt;</code>) form. The operator in this form consists of the method name, prepended with a period. The second argument is the object whose method is called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">.toString</span> <span class="p">(</span><span class="k">new </span><span class="nv">java.util.Date</span><span class="p">))</span>
</span><span class='line'><span class="s">&quot;Thu Apr 05 21:44:36 PDT 2012&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">.toString</span> <span class="p">(</span><span class="nf">java.util.Date.</span><span class="p">))</span>
</span><span class='line'><span class="s">&quot;Thu Apr 05 21:45:22 PDT 2012&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the operator and object, any additional arguments are passed as arguments to the method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">my-hash</span> <span class="p">(</span><span class="nf">java.util.HashMap.</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/my-hash</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">.put</span> <span class="nv">my-hash</span> <span class="s">&quot;food&quot;</span> <span class="s">&quot;tacos&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">.get</span> <span class="nv">my-hash</span> <span class="s">&quot;food&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;tacos&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, a <code>symbol</code> called <code>my-hash</code> is created and bound to a HashMap instance. Then a value is added to the HashMap for the key <code>"food"</code>. Then the value is retrieved from the HashMap.</p>

<p>Static (class) fields and methods are called with a different syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">Integer/MAX_VALUE</span><span class="p">)</span>
</span><span class='line'><span class="mi">2147483647</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">Character/TYPE</span><span class="p">)</span>
</span><span class='line'><span class="nv">char</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">Boolean/valueOf</span> <span class="s">&quot;true&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like with Java, Clojure provides the means to import classes into the current context, so that classes do not need to be written out using the fully-qualified syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">java.io</span> <span class="nv">FileReader</span><span class="p">))</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">FileReader.</span> <span class="s">&quot;source.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">java.io.FileReader</span><span class="o">@</span><span class="nv">f784d7</span>
</span></code></pre></td></tr></table></div></figure>


<p>Multiple classes within a package can be included, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">java.io</span> <span class="nv">File</span> <span class="nv">FileReader</span><span class="p">))</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both the <code>File</code> and <code>FileReader</code> classes are</p>

<p>imported above.</p>

<p>If the classes are in different packages, use this syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">java.io</span> <span class="nv">File</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">java.util</span> <span class="nv">HashMap</span><span class="p">))</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can use two separate import statements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">java.io</span> <span class="nv">File</span><span class="p">))</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">java.util</span> <span class="nv">HashMap</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="libraries"></a></p>

<h2>Using Clojure Libraries</h2>

<p>If you&rsquo;re writing an application, you&rsquo;ll probably end up using a third party library.</p>

<h3>Leiningen</h3>

<p>The ideal way to import libraries is to use a packaging tool called Leiningen.</p>

<p>First, <a href="https://github.com/technomancy/leiningen/">install Leiningen</a>. In order to do its job, Leiningen needs to create a new project directory for your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; lein new my-project
</span></code></pre></td></tr></table></div></figure>


<p>In the new project directory, it puts a file, <code>project.clj</code> that represents your project to Leiningen. Go ahead an edit this file, changing the project description to match your tastes.</p>

<p>There are two main repositories for Clojure libraries: <a href="http://dev.clojure.org/display/doc/Clojure+Contrib">Clojure Contrib</a>, and <a href="https://clojars.org/">Clojars</a>. We&rsquo;ll look at Clojure Contrib.</p>

<h3>Clojure Contrib</h3>

<p>The libraries in Clojure Contrib can be found at <a href="http://dev.clojure.org/display/doc/Clojure+Contrib">the Clojure Contrib libraries list</a>. Choose a library to use. For this tutorial, we&rsquo;ll use <code>data.json</code>.</p>

<p>Edit your <code>project.clj</code> file. Add a new vector to the <code>:dependencies</code> vector. This new vector will contain two elements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="nv">org.clojure/data.json</span> <span class="s">&quot;0.1.2&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Clojure Contrib libraries and any other libraries associated with the Clojure project, the dependency path with start with <code>org.clojure/</code>, followed by the library name, <code>data.json</code></p>

<p>So now, the <code>:dependencies</code> vector will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">]</span>
</span><span class='line'>               <span class="p">[</span><span class="nv">org.clojure/data.json</span> <span class="s">&quot;0.1.2&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When using Leiningen for your project, you need to use lein to get to the REPL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; lein repl
</span><span class='line'>REPL started<span class="p">;</span> server listening on localhost port 64984
</span><span class='line'><span class="nv">user</span><span class="o">=</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now the library can be referenced from your code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.data.json</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">read-json</span> <span class="nv">json-str</span><span class="p">)])</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">json-str</span> <span class="p">{</span><span class="ss">:color</span> <span class="s">&quot;red&quot;</span> <span class="ss">:name</span> <span class="s">&quot;apple&quot;</span><span class="p">})</span>
</span><span class='line'><span class="s">&quot;{\&quot;name\&quot;:\&quot;apple\&quot;,\&quot;color\&quot;:\&quot;red\&quot;}&quot;</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">read-json</span> <span class="s">&quot;{\&quot;width\&quot;: 300, \&quot;height\&quot;: 200}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:width</span> <span class="mi">300</span>, <span class="ss">:height</span> <span class="mi">200</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="resources"></a></p>

<h2>Additional Resources</h2>

<ul>
<li><a href="http://clojuredocs.org/">ClojureDocs: http://clojuredocs.org/</a></li>
<li><a href="http://en.wikibooks.org/wiki/Clojure_Programming">Clojure Programming Wikibook: http://en.wikibooks.org/wiki/Clojure_Programming</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Escape, Unescape, Encode, Decode, HTML, XML, URI, URL]]></title>
    <link href="http://www.moxleystratton.com/blog/2007/07/31/ruby-escape-unescape-encode-decode-html-xml-uri-url/"/>
    <updated>2007-07-31T12:00:00-07:00</updated>
    <id>http://www.moxleystratton.com/blog/2007/07/31/ruby-escape-unescape-encode-decode-html-xml-uri-url</id>
    <content type="html"><![CDATA[<p>This example shows you how to escape and un-escape a value to be included in a URI and within HTML.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;cgi&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Escape data for URL query parameters</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;ruby?&quot;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;yes&quot;</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://example.com/?&quot;</span> <span class="o">+</span> <span class="no">CGI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;=&#39;</span> <span class="o">+</span> <span class="no">CGI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&amp;var=T&quot;</span>
</span><span class='line'><span class="c1"># url: http://example.com/?ruby%3F=yes&amp;var=T</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Escape data for HTML</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://example.com/?ruby%3F=yes&amp;var=T&quot;</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="sx">%(&lt;a href=&quot;</span><span class="si">#{</span><span class="no">CGI</span><span class="o">.</span><span class="n">escapeHTML</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="si">}</span><span class="sx">&quot;&gt;example&lt;/a&gt;)</span>
</span><span class='line'><span class="c1"># html: &lt;a href=&quot;http://example.com/?ruby%3F=yes&amp;amp;var=T&quot;&gt;example&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Unescape HTML-escaped data</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="no">CGI</span><span class="o">.</span><span class="n">unescapeHTML</span><span class="p">(</span><span class="s2">&quot;http://example.com/?ruby%3F=yes&amp;amp;var=T&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># url: http://example.com/?ruby%3F=yes&amp;var=T</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse query params:</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;ruby%3F=yes&amp;var=T&quot;</span>
</span><span class='line'><span class="n">pairs</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&amp;&#39;</span><span class="p">)</span>    <span class="c1"># pairs: [&quot;ruby%3F=yes&quot;, &quot;var=T&quot;]</span>
</span><span class='line'><span class="nb">name</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">pairs</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="no">CGI</span><span class="o">.</span><span class="n">unescape</span><span class="p">(</span><span class="n">v</span><span class="p">)}</span>
</span><span class='line'><span class="c1"># name, value: [&quot;ruby?&quot;, &quot;yes&quot;]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bookmarklet Compiler]]></title>
    <link href="http://www.moxleystratton.com/blog/2006/01/11/bookmarklet-compiler/"/>
    <updated>2006-01-11T12:00:00-08:00</updated>
    <id>http://www.moxleystratton.com/blog/2006/01/11/bookmarklet-compiler</id>
    <content type="html"><![CDATA[<p>What are bookmarklets? They&rsquo;re small Javascripts, saved as browser bookmarks, that perform useful functions. Here&rsquo;s my favorite <a href="http://www.squarefree.com/bookmarklets/">bookmarklet site</a>. It includes the bookmarklet that helped me develop my first Ajax applications: <a href="http://www.squarefree.com/shell/">Javascript Shell</a>.</p></p>

<!-- more -->


<h2>How do you make a bookmarklet?</h2>

<ol>
<li>Write the javascript that you want to be the bookmarklet.</li>
<li>Escape all the special URL characters, like space, parentheses, etc.</li>
<li>Wrap the script in an anonymous Javascript function</li>
<li>Wrap the function in a Javascript URL (<code>javascript:...</code>)</li>
<li>Better yet, just do step #1 and use the bookmarklet maker below to do the rest.</li>
</ol>


<h2>Bookmarklet Maker</h2>

<p>This form will take your nicely-formatted Javascript, and turn it into a URL so that you can bookmark it.</p>

<p>Go ahead and enter some javascript.</p>

<script type="text/javascript" src="http://www.moxleystratton.com/bookmarklet/bookmarklet-compiler.js"></script>


<p><form id="bookmarkletGenerator" method="get" action="javascript:;">
  <textarea cols="80" rows="10" id="source"></textarea></p>

<p>  <input type="button" onclick="Bookmarklet.forPost()" value="Make Bookmarket"/>
</form></p>

<div id="generated"></div>






<p>The Javascript function for creating the bookmarklet maker can be downloaded <a href="https://raw.github.com/moxley/misc/master/bookmarklet-compiler.js">from Github</a></p>
]]></content>
  </entry>
  
</feed>
